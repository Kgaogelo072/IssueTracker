name: Deploy IssueTracker to Azure

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  RESOURCE_GROUP: rg-issuetracker
  API_APP_NAME: issuetracker-api
  FRONTEND_APP_NAME: issuetracker-frontend
  # From angular.json -> "outputPath": "dist/issue-tracker-frontend"
  FRONTEND_DIST: Frontend/dist/issue-tracker-frontend

concurrency:
  group: production
  cancel-in-progress: true

jobs:
  build-and-test-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x' # use 9.x only if your project targets .NET 9

      - name: Restore, Build, Test API
        working-directory: Backend/IssueTracker.API
        run: |
          dotnet restore
          dotnet build --no-restore -c Release
          dotnet test --no-build -c Release --verbosity normal

  build-and-test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json

      - name: Install dependencies
        working-directory: Frontend
        run: npm ci

      # For production build, point Angular at the SWA proxy to avoid CORS:
      - name: Inject production environment.ts
        working-directory: Frontend
        run: |
          mkdir -p src/environments
          cat > src/environments/environment.ts << 'EOF'
          export const environment = {
            production: true,
            apiUrl: '/api' // SWA proxy (see staticwebapp.config.json)
          };
          EOF

      - name: Build frontend
        working-directory: Frontend
        run: npm run build -- --configuration production

      - name: Show dist contents
        run: ls -la "${{ env.FRONTEND_DIST }}"

      - name: Upload built frontend as artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: ${{ env.FRONTEND_DIST }}

  deploy-api:
    needs: [ build-and-test-api ]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'master') }}
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Publish API
        working-directory: Backend/IssueTracker.API
        run: dotnet publish -c Release -o ./publish

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.API_APP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./Backend/IssueTracker.API/publish

      # Optional: configure app settings with Azure CLI (keeps localhost dev CORS)
      - name: Azure CLI login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Select subscription
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Configure connection string
        run: |
          az webapp config connection-string set \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.API_APP_NAME }} \
            --connection-string-type "SQLAzure" \
            --settings DefaultConnection="${{ secrets.AZURE_SQL_CONNECTION_STRING }}"

      - name: Configure app settings
        run: |
          az webapp config appsettings set \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.API_APP_NAME }} \
            --settings \
              "ASPNETCORE_ENVIRONMENT=Production" \
              "Jwt__SecretKey=${{ secrets.JWT_SECRET_KEY }}" \
              "Jwt__Issuer=https://${{ env.API_APP_NAME }}.azurewebsites.net" \
              "Jwt__Audience=${{ secrets.JWT_AUDIENCE }}" \
              "Cors__AllowedOrigins=https://localhost:4200"
      
      - name: Run database migrations
        run: |
          echo "Running database migrations..."
          # Use curl to trigger the migration via a custom endpoint or use Kudu API
          echo "Database migrations will be run manually after deployment"
          echo "To run migrations manually, use:"
          echo "1. Go to Azure Portal -> App Service -> Advanced Tools (Kudu)"
          echo "2. Open SSH console"
          echo "3. Run: cd /home/site/wwwroot && /usr/share/dotnet/dotnet ef database update"

  deploy-frontend:
    needs: [ build-and-test-frontend ]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'master') }}
    environment: production
    steps:
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist

      # SWA proxy: forward /api/* to the App Service, and keep SPA fallback
      - name: Write staticwebapp.config.json
        run: |
          cat > dist/staticwebapp.config.json << 'EOF'
          {
            "navigationFallback": {
              "rewrite": "/index.html",
              "exclude": ["/assets/*", "/*.{css,js,png,jpg,svg,ico,webp,woff,woff2}"]
            },
            "routes": [
              { "route": "/api/*", "rewrite": "https://issuetracker-api.azurewebsites.net/api/*" }
            ]
          }
          EOF
          echo "----- staticwebapp.config.json -----"
          cat dist/staticwebapp.config.json

      - name: Verify SWA token (push only)
        run: |
          if [ -z "${{ secrets.SWA_DEPLOYMENT_TOKEN }}" ]; then
            echo "Missing SWA_DEPLOYMENT_TOKEN secret." && exit 1
          fi

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          deployment_token: ${{ secrets.SWA_DEPLOYMENT_TOKEN }}
          azure_static_web_apps_api_token: ${{ secrets.SWA_DEPLOYMENT_TOKEN }} # back-compat
          repo_token: ${{ github.token }}
          action: upload
          app_location: "dist"      # folder that contains index.html + staticwebapp.config.json
          skip_app_build: true
          production_branch: ${{ github.ref_name }}
          skip_deploy_on_missing_secrets: true

  notify-deployment:
    needs: [ deploy-api, deploy-frontend ]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'master') }}
    steps:
      - name: Deployment Summary
        run: |
          echo "ðŸš€ Deployment completed!"
          echo "API: https://${{ env.API_APP_NAME }}.azurewebsites.net"
          if [ -n "${{ secrets.SWA_HOSTNAME }}" ]; then
            echo "Frontend: https://${{ secrets.SWA_HOSTNAME }}"
          else
            echo "Frontend: (SWA hostname not provided as a secret)"
          fi
          echo "Portal (resource group): https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}"
