name: Deploy IssueTracker to Azure

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  RESOURCE_GROUP: rg-issuetracker
  API_APP_NAME: issuetracker-api
  # From angular.json -> "outputPath": "dist/issue-tracker-frontend"
  FRONTEND_DIST: Frontend/dist/issue-tracker-frontend

concurrency:
  group: production
  cancel-in-progress: true

jobs:
  build-and-test-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore, Build, Test API
        working-directory: Backend/IssueTracker.API
        run: |
          dotnet restore
          dotnet build --no-restore -c Release
          dotnet test --no-build -c Release --verbosity normal

  build-and-test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: Frontend/package-lock.json

      - name: Install dependencies
        working-directory: Frontend
        run: npm ci

      - name: Show production environment file
        working-directory: Frontend
        run: cat src/environments/environment.prod.ts

      - name: Build frontend (production)
        working-directory: Frontend
        run: npm run build -- --configuration production

      - name: Show dist contents
        run: |
          echo "---- ${{ env.FRONTEND_DIST }} ----"
          ls -la "${{ env.FRONTEND_DIST }}" || true
          if [ -d "${{ env.FRONTEND_DIST }}/browser" ]; then
            echo "---- ${{ env.FRONTEND_DIST }}/browser ----"
            ls -la "${{ env.FRONTEND_DIST }}/browser"
          fi

      - name: Upload built frontend as artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: ${{ env.FRONTEND_DIST }}

  deploy-api:
    needs: [ build-and-test-api ]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'master') }}
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Publish API
        run: dotnet publish Backend/IssueTracker.API/IssueTracker.API.csproj -c Release -o ${{ github.workspace }}/api-publish

      - name: Show publish output
        run: ls -la ${{ github.workspace }}/api-publish

      - name: Zip package
        run: |
          cd ${{ github.workspace }}/api-publish
          zip -r ../api.zip .

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.API_APP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ github.workspace }}/api.zip

      - name: Azure CLI login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Select subscription
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Configure connection string
        run: |
          az webapp config connection-string set \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.API_APP_NAME }} \
            --connection-string-type "SQLAzure" \
            --settings DefaultConnection="${{ secrets.AZURE_SQL_CONNECTION_STRING }}"

      - name: Configure app settings
        run: |
          az webapp config appsettings set \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.API_APP_NAME }} \
            --settings \
              "ASPNETCORE_ENVIRONMENT=Production" \
              "Jwt__SecretKey=${{ secrets.JWT_SECRET_KEY }}" \
              "Jwt__Issuer=https://${{ env.API_APP_NAME }}.azurewebsites.net" \
              "Jwt__Audience=${{ secrets.JWT_AUDIENCE }}"

      - name: Restart Web App
        run: az webapp restart --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.API_APP_NAME }}

  deploy-frontend:
    needs: [ build-and-test-frontend ]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'master') }}
    environment: production
    steps:
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Determine app root
        id: appr
        shell: bash
        run: |
          set -euo pipefail
          APP_ROOT=""
          if [ -f "dist/index.html" ]; then
            APP_ROOT="dist"
          elif [ -f "dist/browser/index.html" ]; then
            APP_ROOT="dist/browser"
          elif [ -f "dist/issue-tracker-frontend/index.html" ]; then
            APP_ROOT="dist/issue-tracker-frontend"
          elif [ -f "dist/issue-tracker-frontend/browser/index.html" ]; then
            APP_ROOT="dist/issue-tracker-frontend/browser"
          else
            FOUND="$(find dist -maxdepth 3 -type f -name index.html | head -n 1 || true)"
            if [ -n "$FOUND" ]; then
              APP_ROOT="$(dirname "$FOUND")"
            fi
          fi
          if [ -z "$APP_ROOT" ]; then
            echo "::error::Could not locate index.html under the downloaded artifact."
            echo "Tree under dist:"; ls -R dist || true
            exit 1
          fi
          echo "APP_ROOT=$APP_ROOT" >> "$GITHUB_ENV"
          echo "Using APP_ROOT=$APP_ROOT"
          ls -la "$APP_ROOT"

      - name: Inspect existing SWA config
        run: |
          echo ">>> Listing ${{ env.APP_ROOT }}"
          ls -la "${{ env.APP_ROOT }}" || true
          echo ">>> Existing staticwebapp.config.json (if any):"
          [ -f "${{ env.APP_ROOT }}/staticwebapp.config.json" ] && cat "${{ env.APP_ROOT }}/staticwebapp.config.json" || echo "None"
          echo ">>> Existing routes.json (if any):"
          [ -f "${{ env.APP_ROOT }}/routes.json" ] && cat "${{ env.APP_ROOT }}/routes.json" || echo "None"

      - name: Replace SWA config with a safe one (proxy /api)
        run: |
          rm -f "${{ env.APP_ROOT }}/routes.json"
          cat > "${{ env.APP_ROOT }}/staticwebapp.config.json" << 'EOF'
          {
            "routes": [
              {
                "route": "/api/*",
                "rewrite": "https://issuetracker-api.azurewebsites.net/api/*",
                "allowedRoles": ["anonymous"]
              }
            ],
            "navigationFallback": {
              "rewrite": "/index.html",
              "exclude": [
                "/api/*",
                "/assets/*",
                "/favicon.ico"
              ]
            }
          }
          EOF
          echo "----- staticwebapp.config.json -----"
          cat "${{ env.APP_ROOT }}/staticwebapp.config.json"

      - name: Verify SWA token
        run: |
          if [ -z "${{ secrets.SWA_DEPLOYMENT_TOKEN }}" ]; then
            echo "Missing SWA_DEPLOYMENT_TOKEN secret." && exit 1
          fi

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.SWA_DEPLOYMENT_TOKEN }}
          repo_token: ${{ github.token }}
          action: upload
          app_location: ${{ env.APP_ROOT }}
          skip_app_build: true
          production_branch: ${{ github.ref_name }}

  notify-deployment:
    needs: [ deploy-api, deploy-frontend ]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'master') }}
    steps:
      - name: Deployment Summary
        run: |
          echo "ðŸš€ Deployment completed!"
          echo "API: https://${{ env.API_APP_NAME }}.azurewebsites.net"
          echo "Frontend deployed via Azure Static Web Apps."
